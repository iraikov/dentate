
(require-extension matchable)
(require-library srfi-1 irregex data-structures files posix extras ploticus)
(import
 (only srfi-1 filter list-tabulate)
 (only files make-pathname)
 (only posix glob)
 (only data-structures ->string alist-ref compose)
 (only extras fprintf random)
 (only mathh cosh tanh log10)
 (prefix ploticus plot:)
 )

(define comment-pat (string->irregex "^#.*"))

(define (sample n v)
  (let ((ub (vector-length v)))
    (let ((idxs (list-tabulate n (lambda (i) (random ub)))))
      (map (lambda (i) (vector-ref v i)) idxs)
      ))
    )


(define (read-cell-types celltypes-file)
  (let* ((lines (read-lines celltypes-file))
         (n     (string->number (car lines)))
         (rest  (cdr lines)))
    (if (not (= n (length rest)))
        (error 'read-cell-types "number of entries does not match first line in file" celltypes-file))
    (map (lambda (line) 
           (cond ((string=? (car line) "cardinality:")
                  (match-let (((_ cell-number type-name prototype template) line))
                             `(cardinality ,(string->number cell-number)
                                           ,type-name ,prototype ,template)
                             ))
                 ((string=? (car celltype) "indexfile:")
                  (match-let (((_ index-file type-name prototype template) celltype))
                             `(indexfile ,index-file ,type-name ,prototype ,template)))
                 (else
                  (error *read-cell-types "unknown index type" line))
                 ))

         (filter (lambda (line) (not (irregex-match comment-pat line))) rest)
         ))
  )
                  

(define (read-cell-ranges celltypes)
  (fold (lambda (celltype ax)
          (match-let (((lst offset) ax))
                     (case (car celltype)
                       ((cardinality)
                        (match-let (((_ cell-number type-name prototype template) celltype))
                                   (list (cons (cons offset type-name) lst)
                                         (+ offset cell-number))))
                       ((indexfile)
                        (match-let (((_ index-file type-name prototype template) celltype))
                                   (match-let (((min-index max-index)
                                                (fold (lambda (x ax)
                                                        (match-let (((min-index max-index) ax))
                                                                   (let ((n (string->number x)))
                                                                     (list (min n min-index) (max n max-index)))))
                                                                   (list +inf.0 -inf.0)
                                                                   (cdr (read-lines index-file)))))
                                              (list (cons (cons offset type-name) lst)
                                                    (+ offset max-index)))))
                       )))
        (list 0 '()) celltypes))
