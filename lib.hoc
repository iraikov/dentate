
objref strfun
strfun = new StringFunctions()

proc assert() { local test strdef errmsg
    
    test = $1
    errmsg = $s2
    
    if (!test) {
        execerror ("Assertion failed: ", errmsg)
    }
}


// prints all the sections of the given cell
proc printCellSections() { localobj cell strdef typeName
    typeName = $s1
    cell = $o2
    if (strfun.is_artificial(cell) == 0) {
      printf("Cell type %s:\n", typeName)
      forsec cell.all { psection() }
    }
}



// Finds and loads a template located either in ./template or in externalPaths
proc find_template() { local status, found localobj pc, externalPaths, foundv, f strdef path, templatePath, templateName, msg
    
  pc = $o1
  externalPaths = $o2
  templateName = $s3
  
  found = 0
  foundv = new Vector(1)
  f = new File()
  
  if (pc.id() == 0) {
      path = "./templates"
      sprint(templatePath, "%s/%s.hoc", path, templateName)
      status = f.ropen(templatePath)
      if (status == 1) {
          f.close()
          found = 1
          foundv.x[0] = found
      } else {
          for i =0,externalPaths.count()-1 {
              path = externalPaths.o(i).s
              sprint(templatePath, "%s/%s.hoc", path, templateName)
              status = f.ropen(templatePath)
              if (status == 1) {
                  f.close()
                  found = 1
                  foundv.x[0] = found
                  break
              }
          }
      }
  }
  pc.broadcast(foundv, 0)
  found  = foundv.x[0]
  
  if (found == 0) {
      sprint(msg,"unable to find template %s",templateName)
      execerror("find_template",msg)
  }
  
  pc.broadcast(templatePath, 0)
  { load_file(templatePath) }
  
}


