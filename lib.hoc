
proc graphout() { local i,j,node localobj f, v
  f = new File($s1)
  f.wopen()
  for i=0, conlist.count()-1 {
      v = conlist.object(i)
      node = v.x[0]
      for j=1, v.size()-1 {
          f.printf("%d %d\n", node, v.x[j])
      }
  }
  f.close()
}


proc spikeout() { local i localobj f
    
    f = new File($s1)
    f.wopen()
    for i=0, pnm.spikevec.size-1 {
	f.printf("%g %d\n", pnm.spikevec.x[i], pnm.idvec.x[i])
    }
    f.close()
}


// Load celltype info into a CellCategoryInfo template
proc loadCellCategoryInfo() { local i, startpos 
    
    //  object (one object per cell type)
    f2 = new File()
    sprint(cmdstr, "datasets/cellnumbers_%g.dat", $1)
    f2.ropen(cmdstr)
    
    // Scan the first line, which contains a number giving the
    // # cell types, including stimulating (artificial) cells (still?)
    numCellTypes = f2.scanvar
    
    // Define variables to temporarily hold data scanned from file
    objref celltypestring[numCellTypes], techstring[numCellTypes], cellType[numCellTypes]
    double cellnumvar[numCellTypes], cellLayerflag[numCellTypes], cellArtflag[numCellTypes]
    
    for i=0, numCellTypes-1 {
        
	celltypestring[i]= new String()
	techstring[i] = new String()
	f2.scanstr(celltypestring[i].s)				
        // Scan in the cell name
	f2.scanstr(techstring[i].s)
	cellnumvar[i]=f2.scanvar					// Scan in the initial (before sclerosis) number of each cell type
	cellLayerflag[i]=f2.scanvar					// Scan the layer flag (hilar=2, granular=1, molecular=0), where hilar cells
        
	cellArtflag[i]=f2.scanvar					// Scan the artificial flag, 1 = artificial cell, 0 = real cell
    }
    f2.close()
    
    startpos=0
    for i=0, numCellTypes-1 {
	cellType[i] = new CellCategoryInfo(i)	// Make one object for each cell type to store cell type info
	cellType[i].setCellTypeParams(celltypestring[i].s, techstring[i].s, startpos, cellnumvar[i], cellLayerflag[i], cellArtflag[i])	// Set parameters
	cellType[i].numCons = new Vector(numCellTypes,0)
	//if (cellType[i].is_art==0) {cellType[i].setCellTypeDist}	// Load distribution file
	cellType[i].setCellTypeDist	// Load distribution file
	startpos = startpos + cellnumvar[i]		// Increment the startGid for the next cell type's call to setCellTypeParams
    }
}

