begintemplate MOPPCell

public connect2target, subsets, is_art, is_connected
public all, soma, basal, apical, ais, hillock, axon, allaxon
public somaidx, basalidx, apicalidx, axonidx
public xx, yy, zz, position
public syns, layers

create sections[1]

objref all, soma, basal, apical, ais, hillock, axon, allaxon
objref apicalidx, basalidx, somaidx, axonidx, aisidx, hilidx
objref syns, layers

gid = -1

ndends   = -1
ndendsec = -1
nDends   = -1

proc assert() { local test strdef errmsg
    
    test = $1
    errmsg = $s2
    
    if (!test) {
        execerror ("Assertion failed: ", errmsg)
    }
}

// dendrites 1 and 2 are apical
// dendrites 3 and 4 are basal

proc init() {
    
    // dendrites 1*ndendsec and 2*ndendsec are apical
    // dendrites 3*ndendsec and 4*ndendsec are basal
    
    apicalidx = new Vector()
    basalidx  = new Vector()
    somaidx = new Vector()
    axonidx  = new Vector()
    aisidx = new Vector()
    hilidx = new Vector()
    layers = new List()
    syns = new List()
    
    gid = $1
    
    if (numarg() > 2) {
        topol_from_python($o3,$o5,$o6,$o11)
        shape_from_python($o3,$o7,$o8,$o9,$o10)
        layers_from_python($o3,$o4)
    } else {
        ndends   = 4
        ndendsec = 1
        create sections[ndends*ndendsec+1]
        
        somaidx.append(0)
        i=0
        for j=0, ndendsec-1 { 
            basalidx.append(1+i*ndendsec + j)
        }
        i=1
        for j=0, ndendsec-1 { 
            basalidx.append(1+i*ndendsec + j)
        }
        i=2
        for j=0, ndendsec-1 { 
            apicalidx.append(1+i*ndendsec + j)
        }
        i=3
        for j=0, ndendsec-1 { 
            apicalidx.append(1+i*ndendsec + j)
        }
        
        topol(ndends,ndendsec)
        geom()
    }
    subsets()
    geom_nseg()
    biophys()
}


proc subsets() { local i, ndends, ndendsec
    
    all = new SectionList()
    sections[0] all.append()
    for i=0, nDends-1 { 
        sections[i+1] all.append() 
    }
    
    soma = new SectionList()
    sections[0] soma.append()
    
    basal = new SectionList()
    for i=0, basalidx.size()-1 { 
        sections[basalidx.x[i]] basal.append() 
    }
    
    apical = new SectionList()
    for i=0, apicalidx.size()-1 { 
        sections[apicalidx.x[i]] apical.append() 
    }
    
    axon  = new SectionList()
    allaxon  = new SectionList()
    ais      = new SectionList()
    hillock  = new SectionList()

}

proc geom() {
    
    sections[0] {nseg=1 L=20 diam=20} // changed L & diam
    
    sections[1] {nseg=3 L=180 diam=5}	// ncdend 1 and 2 are apical
    sections[2] {nseg=3 L=180 diam=5}
    sections[3] {nseg=3 L=140 diam=3} 	// ncdend 3 and 4 are basal
    sections[4] {nseg=3 L=140 diam=3}
    
}

func lambda_f() { local i, x, y, z, x1, x2, d1, d2, lam
    
    /*
    printf("lambda_f: n3d() = %d\n", n3d())
    if (n3d() <= 3) {
        for i=0, n3d()-1 {
            x = x3d(i)
            y = x3d(i)
            z = x3d(i)
            d = diam3d(i)
            printf("lambda_f: i = %d x = %g y = %g z = %g\n", i, x3d(i), y3d(i), z3d(i))
        }
    }
    */
    
    if (n3d() < 2) {
        return 1e5*sqrt(diam/(4*PI*$1*Ra*cm))
    }
    x1 = arc3d(0)
    d1 = diam3d(0)
    lam = 0
    for i=1, n3d()-1 {
        x2 = arc3d(i)
        d2 = diam3d(i)
        lam += (x2 - x1)/sqrt(d1 + d2)
        x1 = x2   d1 = d2
    }
    //  length of the section in units of lambda
    lam *= sqrt(2) * 1e-5*sqrt(4*PI*$1*Ra*cm)
    
    return L/lam
}

proc geom_nseg() { local freq, d_lambda
    
    freq = 100 // Hz, frequency at which AC length constant will be computed
    d_lambda = 0.1
    
    forsec all { nseg = int((L/(d_lambda*lambda_f(freq))+0.9)/2)*2 + 1  }

}

proc topol() {
    
    ndends = $1
    ndendsec = $2
    
    nDends = ndends*ndendsec
    
    connect sections[1+0*ndendsec+0](0), sections[0](1)
    connect sections[1+1*ndendsec+0](0), sections[0](1)
    connect sections[1+2*ndendsec+0](0), sections[0](0)
    connect sections[1+3*ndendsec+0](0), sections[0](0)
    
    for i=0,ndends-1 {
        for j=1,ndendsec-1 {
	    connect sections[1+i*ndendsec+j](0), sections[1+i*ndendsec+(j-1)](1)
        }
    }
}    


proc biophys() {
    
    gna=0.075
    gkdr=0.0132
    gka=0.00001
    
    forsec all {
        Ra=100
    }
    
    forsec all {
        
	insert ccanl
        catau_ccanl = 3
        caiinf_ccanl = 5.e-6
	insert borgka
        gkabar_borgka=gka
	insert nca  // HAV-N- Ca channel
        gncabar_nca=0.0
	insert lca
        glcabar_lca=0.0015
	insert gskch
        gskbar_gskch=0.00475
	insert cagk
        gkbar_cagk=0.00001
	cm=1.8
    }
    
    forsec soma {
	insert ichan2
	insert na3
	gbar_na3=gna
	gnatbar_ichan2=0
	gkfbar_ichan2=gkdr
	gl_ichan2 = 0.0001063
    } 
    
    forsec apical {   
        
	insert ichan2
        insert na3           
        gbar_na3=gna*0.2
        //gkdrbar_kdr=gkdr*0.2
        //gkabar_kap = gka*0.2
	gkabar_borgka=gka*0.2
	gkfbar_ichan2=gkdr*0.2
	gnatbar_ichan2=0
	gl_ichan2 = 0.0001063
    }
    
    forsec basal {   
        
	insert ichan2
        insert na3           
        gbar_na3=gna*0.2
        //gkdrbar_kdr=gkdr*0.2
        //gkabar_kap = gka*0.2
	gkabar_borgka=gka*0.2
	gkfbar_ichan2=gkdr*0.2
	gnatbar_ichan2=0
	gl_ichan2 = 0.0001063
    }
    
    forsec all {
        ena = 55 
        ekf = -90  
        ek=-90  
        esk=-90 
        elca=130
	el_ichan2 =-63.1	
        cao_ccanl=2 
    }  // make catau slower70e-3 	cao=2 cai=50.e-6 
    
}


proc topol_from_python() { local i,j,p,s,dimsize localobj vidxs, vsrc, vdst, secnodes, swc_types
    
    secnodes  = $o1
    vsrc      = new Vector($o2)
    vdst      = new Vector($o3)
    swc_types = new Vector($o4)
    
    nDends = 0
    nSoma  = 0
    nAxon  = 0
    nAIS   = 0
    nHill  = 0
    
    for s = 0, secnodes.__len__()-1 {
        vidxs = new Vector(secnodes.__getitem__(s))
        i = vidxs.x[vidxs.size()-1]
        swc_type = swc_types.x[i]
        if (swc_type == 8) {
            hilidx.append(s)
            nHill = nHill + 1
            nAxon = nAxon + 1

        }
        if (swc_type == 7) {
            aisidx.append(s)
            nAIS = nAIS + 1
            nAxon = nAxon + 1
        }
        if (swc_type == 4) {
            apicalidx.append(s)
            nDends = nDends + 1
        }
        if (swc_type == 3) {
            basalidx.append(s)
            nDends = nDends + 1
        }
        if (swc_type == 2) {
            axonidx.append(s)
            nAxon = nAxon + 1
        }
        if (swc_type == 1) {
            somaidx.append(s)
            nSoma = nSoma+1
        }
    }
    
    create sections[nDends+nSoma+nAxon]
    for p = 0, vsrc.size-1 {
        i = vsrc.x[p]
        j = vdst.x[p]
        assert (i >= 0,  "compartment index in topology matrix is less than zero")
        assert (j >= 0,  "compartment index in topology matrix is less than zero")
        assert (i < nDends+nSoma+nAxon+1,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        assert (j < nDends+nSoma+nAxon+1,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        if (i == 0) {
            if (j == 1 || j == 2) {
                connect sections[j](0),sections[i](1)
            } else {
                connect sections[j](0),sections[i](0)
            }
        } else {
            connect sections[j](0),sections[i](1)
        }
        
    }
    
    vsrc.resize(0)
    vdst.resize(0)
    
}



proc shape_from_python() { local i,j,k,s localobj secnodes, vx, vy, vz, vradius, idxs, vidxs
    
    secnodes = $o1
    vx = new Vector($o2)
    vy = new Vector($o3)
    vz = new Vector($o4)
    vradius = new Vector($o5)
    
    for s=0, secnodes.__len__()-1 {
        idxs = secnodes.__getitem__(s)
        vidxs = new Vector()
        vidxs.from_python(idxs)
        sections[s] {
            k = vidxs.x[0]
            for i=0, vidxs.size()-1 {
                k = vidxs.x[i]
                pt3dadd(vx.x[k], vy.x[k], vz.x[k], 2*vradius.x[k]) 
            }
            pt3dconst(1)
        }
        
        
    }
    
    vx.resize(0)
    vy.resize(0)
    vz.resize(0)
    vradius.resize(0)
}


proc layers_from_python() { local i,j,k,s localobj secnodes, vlayer, seclayers, idxs, vidxs
    
    secnodes = $o1
    vlayer = new Vector($o2)
    
    for s=0, secnodes.__len__()-1 {
        layers.append(new Vector())
    }
    
    for s=0, secnodes.__len__()-1 {
        idxs = secnodes.__getitem__(s)
        vidxs = new Vector()
        vidxs.from_python(idxs)
        seclayers = layers.o(s)
        k = vidxs.x[0]
        for i=0, vidxs.size()-1 {
            k = vidxs.x[i]
            seclayers.append(vlayer.x[k])
        }
    }
    
    vlayer.resize(0)
}


func is_art()  { return 0 }

obfunc connect2target() { localobj nc // $o1 target point process, optional $o2 returned NetCon
    forsec soma {
        nc = new NetCon(&v(1), $o1)
    }
    nc.threshold = -20
    if (numarg() == 2) { $o2 = nc } // for backward compatibility
    return nc
}

proc position() { local i
    
  sections[0] for i = 0, n3d()-1 {
    pt3dchange(i, $1-xx+x3d(i), $2-yy+y3d(i), $3-zz+z3d(i), diam3d(i))
  }
  xx = $1  yy = $2  zz = $3
}

endtemplate MOPPCell
