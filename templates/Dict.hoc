
// A template to describe key/value pairs 

begintemplate Dict

public dictName, addPropertyScalar, addPropertyString, addPropertyObject, getPropertyScalar, getPropertyString, getPropertyObject, hasProperty
strdef dictName
objref dictList, returnVal

proc init() {
    dictName = $s1
    dictList = new List()
}

proc addPropertyScalar () { localobj kv, name, value
    name = new String($s1)
    value = new Vector(1)
    value.x[0] = $2
    kv = new List()
    kv.append(name)
    kv.append(value)
    dictList.prepend(kv)
}

proc addPropertyString () { localobj kv, name, value
    name = new String($s1)
    value = new String($s2)
    kv = new List()
    kv.append(name)
    kv.append(value)
    dictList.prepend(kv)
}

proc addPropertyObject () { localobj kv, value, name
    name = new String($s1)
    value = $o2
    kv = new List()
    kv.append(name)
    kv.append(value)
    dictList.prepend(kv)
}

func getPropertyScalar () { local i localobj value strdef name
    name = $s1
    for i=0, dictList.count()-1 {
        if (strcmp(name,dictList.o(i).o(0).s) == 0) {
            value = dictList.o(i).o(1)
            break
        }
    }
    return value.x[0]
}

obfunc getPropertyString () { local i localobj value strdef name 
    name = $s1
    for i=0, dictList.count()-1 {
        if (strcmp(name,dictList.o(i).o(0).s) == 0) {
            value = dictList.o(i).o(1)
            break
        }
    }
    return value
}

obfunc getPropertyObject () { local i localobj value, nil strdef name
    strdef errmsg
    name = $s1
    for i=0, dictList.count()-1 {
        if (strcmp(name,dictList.o(i).o(0).s) == 0) {
            value = dictList.o(i).o(1)
            break
        }
    }
    if (value == nil) {
        sprint(errmsg,"getPropertyObject: %s not found",name)
        execerror(errmsg)
    }
    return value
}

func hasProperty () { local i, result strdef name
    name = $s1
    result = 0
    for i=0, dictList.count()-1 {
        if (strcmp(name,dictList.o(i).o(0).s) == 0) {
            result = 1
            break
        }
    }
    return result
}

endtemplate Dict
