begintemplate BasketCell

public connect2target, subsets, is_art, is_connected
public all, soma, basal, apical, ais, hillock, axon, allaxon
public apicalidx, basalidx, somaidx, axonidx, aisidx, hilidx
public xx, yy, zz, position
public syns, layers, ndendpts

create sections[1]

objref all, soma, basal, apical, ais, hillock, axon, allaxon
objref apicalidx, basalidx, somaidx, axonidx, aisidx, hilidx
objref syns, layers, ndendpts

gid = -1

ndends   = -1
ndendsec = -1
nDends   = -1
nSoma    = -1
nAxon    = -1

proc assert() { local test strdef errmsg
    
    test = $1
    errmsg = $s2
    
    if (!test) {
        execerror ("Assertion failed: ", errmsg)
    }
}

proc init() {
    
    apicalidx = new Vector()
    basalidx = new Vector()
    somaidx = new Vector()
    axonidx = new Vector()
    aisidx = new Vector()
    hilidx = new Vector()
    layers = new List()
    syns = new List()
    
    gid = $1
    
    if (numarg() > 2) {
        shape_from_python($o3,$o8,$o9,$o10,$o11)
        topol_from_python($o3,$o5,$o6,$o7,$o12)
        layers_from_python($o3,$o4)
    }
    subsets()
    geom_nseg()
    biophys()

}


proc subsets() { local i, ndends, ndendsec
    
    all = new SectionList()
    for i=0, nDends+nSoma+nAxon-1 { 
        sections[i] all.append() 
    }
    
    soma = new SectionList()
    sections[0] soma.append()
    
    basal = new SectionList()
    for i=0, basalidx.size()-1 { 
        sections[basalidx.x[i]] basal.append() 
    }
    
    apical = new SectionList()
    for i=0, apicalidx.size()-1 { 
        sections[apicalidx.x[i]] apical.append() 
    }
    
    axon     = new SectionList()
    allaxon  = new SectionList()
    ais      = new SectionList()
    hillock  = new SectionList()
    
    if (hilidx.size() > 0) {
        for i=0, hilidx.size()-1 {
            sections[hilidx.x[i]] {
                hillock.append()
                allaxon.append()
                all.append()
            }
        }
    }
    if (aisidx.size() > 0) {
        for i=0, aisidx.size()-1 {
            sections[aisidx.x[i]] {
                ais.append()
                allaxon.append()
                all.append()
            }
        }
    }
    
    for i=0, axonidx.size()-1 {
        sections[axonidx.x[i]] {
            axon.append()
            allaxon.append()
            all.append()
        }
    }

}

func lambda_f() { local i, x, y, z, x1, x2, d1, d2, lam
    
    /*
    printf("lambda_f: n3d() = %d\n", n3d())
    if (n3d() <= 3) {
        for i=0, n3d()-1 {
            x = x3d(i)
            y = x3d(i)
            z = x3d(i)
            d = diam3d(i)
            printf("lambda_f: i = %d x = %g y = %g z = %g\n", i, x3d(i), y3d(i), z3d(i))
        }
    }
    */
    
    if (n3d() < 2) {
        return 1e5*sqrt(diam/(4*PI*$1*Ra*cm))
    }
    x1 = arc3d(0)
    d1 = diam3d(0)
    lam = 0
    for i=1, n3d()-1 {
        x2 = arc3d(i)
        d2 = diam3d(i)
        lam += (x2 - x1)/sqrt(d1 + d2)
        x1 = x2   d1 = d2
    }
    //  length of the section in units of lambda
    lam *= sqrt(2) * 1e-5*sqrt(4*PI*$1*Ra*cm)
    
    return L/lam
}

proc geom_nseg() { local freq, d_lambda
    
    freq = 200 // Hz, frequency at which AC length constant will be computed
    d_lambda = 0.1
    
    forsec all { nseg = int((L/(d_lambda*lambda_f(freq))+0.9)/2)*2 + 1 }

}

proc biophys() {
    
}

proc topol_from_python() { local i,j,p,s,dimsize localobj vidxs, vsrc, vdst, vloc, secnodes, swc_types, smembers
    
    secnodes = $o1
    vsrc     = new Vector($o2)
    vdst     = new Vector($o3)
    vloc     = new Vector($o4)
    swc_types = new Vector($o5)
    smembers = new Vector()
    ndendpts = new Vector()
    ndendpts.resize(secnodes.__len__())
    
    nDends = 0
    nSoma  = 0
    nAxon  = 0
    nAIS   = 0
    nHill  = 0

    for s=0, secnodes.__len__()-1 {
        vidxs = new Vector(secnodes.__getitem__(s))
        ndendpts.x[s] = vidxs.size()
        l = vidxs.x[vidxs.size()-1]
        swc_type = swc_types.x[l]
        if (swc_type == 3) {
            nDends = nDends + 1
            basalidx.append(s)
        }
        if (swc_type == 4) {
            nDends = nDends + 1
            apicalidx.append(s)
        }
        if (swc_type == 8) {
            hilidx.append(s)
            nHill = nHill + 1
            nAxon = nAxon + 1
        }
        if (swc_type == 7) {
            aisidx.append(s)
            nAIS = nAIS + 1
            nAxon = nAxon + 1
        }
        if (swc_type == 2) {
            axonidx.append(s)
            nAxon = nAxon + 1
        }
        if (swc_type == 1) {
            somaidx.append(s)
            nSoma = nSoma + 1
        }

    }
    
    
    for p = 0, vsrc.size-1 {
        i = vsrc.x[p]
        j = vdst.x[p]
        l = vloc.x[p]
        assert (i >= 0,  "compartment index in topology matrix is less than zero")
        assert (j >= 0,  "compartment index in topology matrix is less than zero")
        assert (i < nDends+nSoma+nAxon+1,  "compartment index in topology matrix is greater than the number of compartments")
        assert (j < nDends+nSoma+nAxon+1,  "compartment index in topology matrix is greater than the number of compartments")
        sections[i] loc = arc3d(l) / L
        connect sections[j](0),sections[i](loc)
        
    }
    
    vloc.resize(0)
    vsrc.resize(0)
    vdst.resize(0)
    smembers.resize(0)
    swc_types.resize(0)
}



proc shape_from_python() { local i,j,k,s localobj secnodes, vx, vy, vz, vradius, idxs, vidxs
    
    secnodes = $o1
    vx = new Vector($o2)
    vy = new Vector($o3)
    vz = new Vector($o4)
    vradius = new Vector($o5)
    
    create sections[secnodes.__len__()]
    for s=0, secnodes.__len__()-1 {
        idxs = secnodes.__getitem__(s)
        vidxs = new Vector(idxs)
        sections[s] {
            pt3dconst(0)
            for i=0, vidxs.size()-1 {
                k = vidxs.x[i]
                pt3dadd(vx.x[k], vy.x[k], vz.x[k], 2*vradius.x[k]) 
            }
        }
    }
    
    vx.resize(0)
    vy.resize(0)
    vz.resize(0)
    vradius.resize(0)
    
}

proc layers_from_python() { local i,j,k,s localobj secnodes, vlayer, seclayers, idxs, vidxs
    
    secnodes = $o1
    vlayer = new Vector($o2)
    
    for s=0, secnodes.__len__()-1 {
        layers.append(new Vector())
    }
    
    for s=0, secnodes.__len__()-1 {
        idxs = secnodes.__getitem__(s)
        vidxs = new Vector()
        vidxs.from_python(idxs)
        seclayers = layers.o(s)
        k = vidxs.x[0]
        for i=0, vidxs.size()-1 {
            k = vidxs.x[i]
            seclayers.append(vlayer.x[k])
        }
    }
    
    vlayer.resize(0)
}




func is_art()  { return 0 }

proc position() { local i
    
  sections[0] for i = 0, n3d()-1 {
    pt3dchange(i, $1-xx+x3d(i), $2-yy+y3d(i), $3-zz+z3d(i), diam3d(i))
  }
  xx = $1  yy = $2  zz = $3
}

endtemplate BasketCell
