begintemplate MossyCell

public connect2target, subsets,is_art, is_connected
public soma, dendrites
public all, pdend, ddend
public syns, syns_GC, syns_MC, syns_HC, syns_BC, syns_AA, syns_HCC, syns_NGFC, syns_NGFCB, syns_LPP, syns_MPP
public syn_stim
public xx, yy, zz, position

cellid = -1
gid = -1

nst=10

// dends is properly created in init()
create soma, dendrites[1][1]

objref fl, rs
objref stim[nst]
objref all, pdend, ddend
objref syns, syns_GC, syns_MC, syns_HC, syns_BC, syns_AA, syns_HCC, syns_NGFC, syns_NGFCB, syns_LPP, syns_MPP
objref syn_stim

proc init() { // arguments are id, gid
    
    ndends=4
    ndendsec=4
    create dendrites[ndends][ndendsec]
    
    cellid = $1
    gid = $2

    subsets(ndends,ndendsec)
    geom()
    biophys(ndends,ndendsec)

    syns_GC = new List()
    syns_MC = new List()
    syns_HC = new List()
    syns_BC = new List()
    syns_AA = new List()
    syns_HCC = new List()
    syns_NGFC = new List()
    syns_NGFCB = new List()
    syns_LPP = new List()
    syns_MPP = new List()
    
    syns = new List()
    syns.append(syns_GC)
    syns.append(syns_MC)
    syns.append(syns_HC)
    syns.append(syns_BC)
    syns.append(syns_AA)
    syns.append(syns_HCC)
    syns.append(syns_NGFC)
    syns.append(syns_NGFCB)
    syns.append(syns_LPP)
    syns.append(syns_MPP)
    
    soma {
        syn_stim = new ExpSyn(0.5)
        syn_stim.tau = 1
    }
}


proc subsets() { local i, ndends, ndendsec
    
    ndends = $1
    ndendsec = $2
    
    all = new SectionList()
    soma all.append()
    for i=0, ndends-1 {
        for j=0, ndendsec-1 { 
            dendrites[i][j] { all.append() }
        }
    }
    
    pdend  = new SectionList()
    for i=0, ndends-1 {
        dendrites[i][0] pdend.append()
    }
    
    ddend  = new SectionList()
    for i=0, ndends-1 {
        for j=1, ndendsec-1 {
            dendrites[i][j] ddend.append()
        }
    }
    
}

proc geom() {
    
    soma {nseg=1 L=20 diam=20} // changed L & diam
    
    for i=0, ndends-1 {
        dendrites[i][0] {nseg=1 L=50 diam=5.78}
        dendrites[i][1] {nseg=1 L=50 diam=4}
        dendrites[i][2] {nseg=1 L=50 diam=2.5}
        dendrites[i][3] {nseg=1 L=50 diam=1}
    }
    
}

proc biophys() { local ndends, ndendsec
    
    ndends = $1
    ndendsec = $2
    
    forsec all {
	insert ccanl
	catau_ccanl = 10
	caiinf_ccanl = 5.e-6
	insert borgka
	gkabar_borgka=0.00001
	insert nca  // HAV-N- Ca channel
	gncabar_nca=0.00008  // check to modify- original 0.004
	insert lca 
	glcabar_lca=0.0006
	insert gskch
	gskbar_gskch=0.016
	insert cagk
	gkbar_cagk=0.0165
	insert hyperde3
	ghyfbar_hyperde3=0.000005
	ghysbar_hyperde3=0.000005
    }
    
    soma {
        insert ichan2  //ildikos ichan
	gnatbar_ichan2=0.12  //original 0.030 to .055 
	gkfbar_ichan2=0.0005  //original 0.015
	gl_ichan2 = 0.000011
        cm=0.6
    }
    
    forsec pdend {
        insert ichan2
	gnatbar_ichan2=0.12  //original 0.015
	gkfbar_ichan2=0.0005
	gl_ichan2 = 0.000044
	cm=2.4
    }
    
    forsec ddend {
        insert ichan2
	gnatbar_ichan2=0.0
	gkfbar_ichan2=0.00
	gl_ichan2 = 0.000044
	cm=2.4
    }
    
    connect dendrites[0][0](0), soma(1)
    connect dendrites[1][0](0), soma(1)
    connect dendrites[2][0](0), soma(0)
    connect dendrites[3][0](0), soma(0)
    
    for i = 0,ndends-1 {
        for j=1,ndendsec-1 {
            connect dendrites[i][j](0), dendrites[i][j-1](1)
        }
    }
    
    forsec all {Ra=100}
    forsec all {
        enat = 55
        ekf  = -90
        ek   = -90
        esk  = -90
        elca = 130
	ehyf = -40
        ehys = -40
	el_ichan2 =-59
        cao_ccanl=2 
    }
    // make catau slower70e-3 	cao=2 cai=50.e-6 
    
    objref fl
    // a noise source that emulates fluctuating synaptic conductances
    // the conductances are sampled from a Gaussian distribution
    // where negative values were replaced with 0
    soma fl = new Gfluct3(0.5)
    fl.g_e0 = 0.02
    fl.h = 0.25
    fl.on = 1
    
    rs = new RandomStream(cellid)
    // set the stream to generate a gaussian distribution with mean 0 and variance 1
    rs.r.normal(0, 1)
    // use the random Gaussian distribution stream in the Gfluct2 mechanism
    fl.noiseFromRandom(rs.r)
    
}

func is_art()  { return 0 }

obfunc connect2target() { localobj nc // $o1 target point process, optional $o2 returned NetCon
  soma nc = new NetCon(&v(1), $o1)
  nc.threshold = 10
  if (numarg() == 2) { $o2 = nc } // for backward compatibility
  return nc
}

proc position() { local i
    
  soma for i = 0, n3d()-1 {
    pt3dchange(i, $1-xx+x3d(i), $2-yy+y3d(i), $3-zz+z3d(i), diam3d(i))
  }
  xx = $1  yy = $2  zz = $3
}


external continuerun, cvode_active, cvode

obfunc syntest() { local vec_size, i_holding, w, idx localobj se, ns, nc, nclist, vec, synlist, results, tlog, nil
    
    synlist = $o1
    se = $o2
    w = $3
    v_holding = $4
    v_init = $5
    
    soma { 
        se.rs = 10
        se.dur1 = 1010
        se.amp1 = v_holding 
    }
    
    mainDT = 0.001
    dt = mainDT
    tstop = 1000
    
    vec_size = tstop/mainDT + 1
    
    vec = new Vector(vec_size)
    vec.record(&se.i)
    
    tlog = new Vector(vec_size)
    tlog.record(&t)
    
    ns = new NetStim()
    ns.interval = 1000
    ns.number = 1
    ns.start  = 200
    ns.noise  = 0
    
    nclist = new List()
    for idx=0, synlist.count()-1 {
        nc = new NetCon(ns,synlist.o(idx))
        nc.weight = w
        nc.delay = 0
        nclist.append(nc)
    }
    
    cvode_active(1)
    cvode.use_daspk(1)
    cvode.dae_init_dteps(1e-9, 2)

    finitialize(v_init)
    fadvance()
    continuerun(tstop)
    
    i_holding = vec.x[tlog.indwhere(">=",ns.start)]
    idx = tlog.indwhere(">=",ns.start) - 1
    vec.remove(0,idx)
    tlog.remove(0,idx)
    
    vec.printf()
    tlog.printf()
    
    i_peak = vec.min()
    t_peak = tlog.x[vec.indwhere("==",i_peak)]
    
    print "i_peak = ", i_peak
    print "i_holding = ", i_holding
    print "i_peak - i_holding = ", i_peak - i_holding
    
    amp = abs(i_peak - i_holding) * 1000
    
    i_0001 = i_holding + (i_peak - i_holding) * 1/10000
    i_10 = i_holding + (i_peak - i_holding) * 1/10
    i_20 = i_holding + (i_peak - i_holding) * 2/10
    i_50 = i_holding + (i_peak - i_holding) * 5/10
    i_80 = i_holding + (i_peak - i_holding) * 8/10
    i_90 = i_holding + (i_peak - i_holding) * 9/10
    
    t_10_90 = tlog.x[vec.indwhere("<",i_90)] - tlog.x[vec.indwhere("<",i_10)]
    t_20_80 = tlog.x[vec.indwhere("<",i_80)] - tlog.x[vec.indwhere("<",i_20)]
    
    t_all = t_peak - tlog.x[(vec.indwhere("<",i_0001))]
    t_50  = t_peak - tlog.x[(vec.indwhere(">",i_50))]
    
    idx = vec.indwhere("==",i_peak) - 1
    if (idx >= 0) {
        vec.remove(0,idx)
        tlog.remove(0,idx)
    }
    
    i_t	= i_holding - ((1/exp(1)) * abs(i_peak - i_holding))
    t_decay = tlog.x[vec.indwhere(">",i_t)] - tlog.x[0]
    
    results = new Vector()
    results.append(amp,t_10_90,t_20_80,t_all,t_50,t_decay)
    
    ns = nil
    nc = nil
    
    return results
}

endtemplate MossyCell
