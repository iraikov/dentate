begintemplate MossyCell

public connect2target, subsets, is_art, is_connected
public soma, mcdend1, mcdend2, mcdend3, mcdend4
public all, adend, bdend, cdend, ddend
public stim
public xx, yy, zz, position

cellid = -1
random_stream_offset = 0

nst=10

ndend1=4
ndend2=4
ndend3=4
ndend4=4

create soma, mcdend1[ndend1], mcdend2[ndend2], mcdend3[ndend3], mcdend4[ndend4]

objref syn, fl, rs
objref stim[nst]
objref all, pdend, ddend
objref synlist

proc init() { // arguments are gid, random_stream_offset
    
    cellid = $1
    random_stream_offset = $2
    synlist = new List()
    subsets()
    geom()
    biophys()
    synapses()
}


proc subsets() { local i
    
    all = new SectionList()
    soma all.append()
    for i=0, 3 mcdend1 [i] all.append()
    for i=0, 3 mcdend2 [i] all.append()
    for i=0, 3 mcdend3 [i] all.append()
    for i=0, 3 mcdend4 [i] all.append()
    
    pdend  = new SectionList()
    mcdend1 [0] pdend.append()
    mcdend2 [0] pdend.append()
    mcdend3 [0] pdend.append()
    mcdend4 [0] pdend.append()
    
    ddend  = new SectionList()
    for i=1, 3 mcdend1 [i] ddend.append()
    for i=1, 3 mcdend2 [i] ddend.append()
    for i=1, 3 mcdend3 [i] ddend.append()
    for i=1, 3 mcdend4 [i] ddend.append()
    
}

proc geom() {
    
    soma {nseg=1 L=20 diam=20} // changed L & diam
    
    mcdend1 [0] {nseg=1 L=50 diam=5.78}
    mcdend1 [1] {nseg=1 L=50 diam=4}
    mcdend1 [2] {nseg=1 L=50 diam=2.5}
    mcdend1 [3] {nseg=1 L=50 diam=1}
    
    mcdend2 [0] {nseg=1 L=50 diam=5.78}
    mcdend2 [1] {nseg=1 L=50 diam=4}
    mcdend2 [2] {nseg=1 L=50 diam=2.5}
    mcdend2 [3] {nseg=1 L=50 diam=1}
    
    mcdend3 [0] {nseg=1 L=50 diam=5.78}
    mcdend3 [1] {nseg=1 L=50 diam=4}
    mcdend3 [2] {nseg=1 L=50 diam=2.5}
    mcdend3 [3] {nseg=1 L=50 diam=1} 
    
    mcdend4 [0] {nseg=1 L=50 diam=5.78}
    mcdend4 [1] {nseg=1 L=50 diam=4}
    mcdend4 [2] {nseg=1 L=50 diam=2.5}
    mcdend4 [3] {nseg=1 L=50 diam=1} 	
    
}

proc biophys() {
    
    forsec all {
	insert ccanl
	catau_ccanl = 10
	caiinf_ccanl = 5.e-6
	insert borgka
	gkabar_borgka=0.00001
	insert nca  // HAV-N- Ca channel
	gncabar_nca=0.00008  // check to modify- original 0.004
	insert lca 
	glcabar_lca=0.0006
	insert gskch
	gskbar_gskch=0.016
	insert cagk
	gkbar_cagk=0.0165
	insert hyperde3
	ghyfbar_hyperde3=0.000005
	ghysbar_hyperde3=0.000005
    }
    
    soma {
        insert ichan2  //ildikos ichan
	gnatbar_ichan2=0.12  //original 0.030 to .055 
	gkfbar_ichan2=0.0005  //original 0.015
	gl_ichan2 = 0.000011
        cm=0.6
    }
    
    forsec pdend {
        insert ichan2
	gnatbar_ichan2=0.12  //original 0.015
	gkfbar_ichan2=0.0005
	gl_ichan2 = 0.000044
	cm=2.4
    }
    
    forsec ddend {
        insert ichan2
	gnatbar_ichan2=0.0
	gkfbar_ichan2=0.00
	gl_ichan2 = 0.000044
	cm=2.4
    }
    
    connect mcdend1[0](0), soma(1)
    connect mcdend2[0](0), soma(1)
    connect mcdend3[0](0), soma(0)
    connect mcdend4[0](0), soma(0)
    
    for i=1,3 {connect mcdend1[i](0), mcdend1[i-1](1)}
    for i=1,3 {connect mcdend2[i](0), mcdend2[i-1](1)}
    for i=1,3 {connect mcdend3[i](0), mcdend3[i-1](1)}
    for i=1,3 {connect mcdend4[i](0), mcdend4[i-1](1)}
    
    forsec all {Ra=100}
    forsec all {
        enat = 55
        ekf = -90
        ek=-90
        esk=-90
        elca=130
	ehyf=-40
        ehys=-40
	el_ichan2 =-59
        cao_ccanl=2 
    }
    // make catau slower70e-3 	cao=2 cai=50.e-6 
    
    soma stim = new IClamp(0.5)
    stim.del = 0.01
    stim.dur = 4000
    stim.amp = 0.5
    
    objref fl
    // a noise source that emulates fluctuating synaptic conductances
    // the conductances are sampled from a Gaussian distribution
    // where negative values were replaced with 0
    soma fl = new Gfluct2(0.5)
    
    // Generate a new random stream, setting
    //	aside 'random_stream_offset' random numbers
    //	for this cell based on its gid
    rs = new RandomStream(cellid*random_stream_offset+1)
    
    // set the stream to generate a gaussian distribution with mean 0 and variance 1
    rs.r.normal(0, 1)
    // use the random Gaussian distribution stream in the Gfluct2 mechanism
    fl.noiseFromRandom(rs.r)
    
    
}

func is_art()  { return 0 }

obfunc connect2target() { localobj nc // $o1 target point process, optional $o2 returned NetCon
  soma nc = new NetCon(&v(1), $o1)
  nc.threshold = 10
  if (numarg() == 2) { $o2 = nc } // for backward compatibility
  return nc
}

proc position() { local i
    
  soma for i = 0, n3d()-1 {
    pt3dchange(i, $1-xx+x3d(i), $2-yy+y3d(i), $3-zz+z3d(i), diam3d(i))
  }
  xx = $1  yy = $2  zz = $3
}

objref syn_
proc synapses() {
    /* E0 */   mcdend1 syn_ = new ExpSyn(0.8)  
    synlist.append(syn_)
    syn_.tau = 2
    /* I1 */   mcdend1 syn_ = new ExpSyn(0.1)  
    synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -80
}

endtemplate MossyCell
