begintemplate MossyCell

public connect2target, subsets, is_art, is_connected
public all, soma, basal, apical, ais, hillock, axon, allaxon
public somaidx, basalidx, apicalidx, axonidx
public syns, syntypes
public syn_stim
public xx, yy, zz, position
public syn_stim, syntest_exc, syntest_inh

// dends is properly created in init()
create sections[1]

objref fl//, rs
objref all, soma, basal, apical, ais, hillock, axon, allaxon
objref somaidx, basalidx, apicalidx, axonidx, aisidx, hilidx
objref syns, syntypes
objref syn_stim

cellid = -1
gid = -1

ndends   = -1
ndendsec = -1
nDends   = -1

proc assert() { local test strdef errmsg
    
    test = $1
    errmsg = $s2
    
    if (!test) {
        execerror ("Assertion failed: ", errmsg)
    }
}

proc init() { // arguments are id, gid
    
    apicalidx = new Vector()
    basalidx = new Vector()
    somaidx = new Vector()
    axonidx = new Vector()
    aisidx = new Vector()
    hilidx = new Vector()
    
    cellid = $1
    gid = $2
    
    if (numarg() > 2) {
        topol_from_python($o4,$o5,$o6,$o7,$o12)
        shape_from_python($o7,$o8,$o9,$o10,$o11)
    } else {
        ndends   = 4
        ndendsec = 4
        create sections[1+ndends*ndendsec]
        
        somaidx.append(0)
        for i=0, ndends-1 {
            for j=0, ndendsec-1 { 
                apicalidx.append(1+i*ndendsec + j)
            }
        }
        
        topol(ndends,ndendsec)
        geom()
    }
    subsets()
    geom_nseg()
    biophys()
    
    syns = new List()
    syntypes = new List()
    syntypes.append(new List()) // excitatory
    syntypes.append(new List()) // inhibitory
}


proc subsets() { local i, ndends, ndendsec
    
    all = new SectionList()
    sections[0] all.append()
    for i=0, nDends-1 { 
        sections[i+1] all.append() 
    }
    
    soma = new SectionList()
    sections[0] soma.append()
    
    apical = new SectionList()
    for i=0, apicalidx.size()-1 { 
        sections[apicalidx.x[i]] apical.append() 
    }
    
    basal = new SectionList()
    axon  = new SectionList()
    allaxon  = new SectionList()
    ais      = new SectionList()
    hillock  = new SectionList()

}

proc geom() {
    
    sections[0] {nseg=1 L=20 diam=20} // changed L & diam
    
    for i=0, 3 {
        sections[1+i*ndendsec+0] {nseg=3 L=24 diam=5.78}
        sections[1+i*ndendsec+1] {nseg=3 L=24 diam=4}
        sections[1+i*ndendsec+2] {nseg=3 L=24 diam=2.5}
        sections[1+i*ndendsec+3] {nseg=3 L=24 diam=1}
    }
    
}

func lambda_f() { local i, x, y, z, x1, x2, d1, d2, lam
    
    /*
    printf("lambda_f: n3d() = %d\n", n3d())
    if (n3d() <= 3) {
        for i=0, n3d()-1 {
            x = x3d(i)
            y = x3d(i)
            z = x3d(i)
            d = diam3d(i)
            printf("lambda_f: i = %d x = %g y = %g z = %g\n", i, x3d(i), y3d(i), z3d(i))
        }
    }
    */
    
    if (n3d() < 2) {
        return 1e5*sqrt(diam/(4*PI*$1*Ra*cm))
    }
    x1 = arc3d(0)
    d1 = diam3d(0)
    lam = 0
    for i=1, n3d()-1 {
        x2 = arc3d(i)
        d2 = diam3d(i)
        lam += (x2 - x1)/sqrt(d1 + d2)
        x1 = x2   d1 = d2
    }
    //  length of the section in units of lambda
    lam *= sqrt(2) * 1e-5*sqrt(4*PI*$1*Ra*cm)
    
    return L/lam
}

proc geom_nseg() {
  	forsec all { nseg = int((L/(0.1*lambda_f(200))+.9)/2)*2 + 1  }
}

proc topol() {
    
    ndends = $1
    ndendsec = $2
    
    nDends = ndends*ndendsec
    
    connect sections[1+0*ndendsec+0](0), sections[0](1)
    connect sections[1+1*ndendsec+0](0), sections[0](1)
    connect sections[1+2*ndendsec+0](0), sections[0](0)
    connect sections[1+3*ndendsec+0](0), sections[0](0)
    
    for i=0,ndends-1 {
        for j=1,ndendsec-1 {
	    connect sections[1+i*ndendsec+j](0), sections[1+i*ndendsec+(j-1)](1)
        }
    }
}    


proc biophys() { local ndends, ndendsec
    
    forsec all {
        Ra=100
        cm=0.5
    }
    
    soma { distance() }
    
    forsec all {
	insert ccanl
	catau_ccanl = 1
	caiinf_ccanl = 5.e-6
	insert borgka
	gkabar_borgka=0.0001
	insert nca  // HAV-N- Ca channel
	gncabar_nca=0.00008  // check to modify- original 0.004
	insert lca 
	glcabar_lca=0.0006
	insert gskch
	gskbar_gskch=0.016
	insert cagk
	gkbar_cagk=0.0165
	insert hyperde3
	ghyfbar_hyperde3=0.000005
	ghysbar_hyperde3=0.000005
    }
    
    forsec soma {
        insert ichan2  //ildikos ichan
	gnatbar_ichan2=0.32  //original 0.030 to .055 
	gkfbar_ichan2=0.025  //original 0.015
	gl_ichan2 = 0.00002
    }
    
    forsec apical {
        for (x,0) {
            insert ichan2
            if (distance(x) <= 200) {
	        gnatbar_ichan2=0.16  //original 0.015
	        gkfbar_ichan2=0.015
	        gl_ichan2 = 0.00002
	        gkbar_cagk=0.008
            } else {
	        gnatbar_ichan2=0.0
	        gkfbar_ichan2=0.00
	        gl_ichan2 = 0.000001
	        gkbar_gskch=0.004
	        gkbar_cagk=0.0025
            }
        }
    }
    
    forsec all {
        enat = 55
        ekf  = -90
        ek   = -90
        esk  = -90
        elca = 130
	ehyf = -40
        ehys = -40
	el_ichan2 =-55
        cao_ccanl=2 
    }
    
    //objref fl
    // a noise source that emulates fluctuating synaptic conductances
    // the conductances are sampled from a Gaussian distribution
    // where negative values were replaced with 0
    //soma fl = new Gfluct3(0.5)
    //fl.h = 0.1
    //fl.on = 1

    //rs = new RandomStream(gid, 0, 3)
    // set the stream to generate a gaussian distribution with mean 0 and variance 1
    //rs.r.normal(0, 1)
    // use the random Gaussian distribution stream in the Gfluct2 mechanism
    //fl.noiseFromRandom(rs.r)
    //fl.noiseFromRandom123(gid, 0, 3)
    
}

proc topol_from_python() { local i,j,p,s,dimsize localobj vidxs, vlayers, vsrc, vdst, secnodes, swc_types
    
    // vlayers, vsrc, vdst, secnodes
    vlayers  = new Vector($o1)
    vsrc     = new Vector($o2)
    vdst     = new Vector($o3)
    secnodes = $o4
    swc_types = new Vector($o5)
    
    nDends = secnodes.__len__()-1
    
    for s = 0, secnodes.__len__()-1 {
        vidxs = new Vector(secnodes.__getitem__(s))
        i = vidxs.x[vidxs.size()-1]
        swc_type = swc_types.x[i]
        if (swc_type == 4) {
            apicalidx.append(s)
        }
        if (swc_type == 3) {
            basalidx.append(s)
        }
        if (swc_type == 1) {
            somaidx.append(s)
        }
    }
    
    create sections[nDends+1]
    for p = 0, vsrc.size-1 {
        i = vsrc.x[p]
        j = vdst.x[p]
        assert (i >= 0,  "compartment index in topology matrix is less than zero")
        assert (j >= 0,  "compartment index in topology matrix is less than zero")
        assert (i < nDends+1,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        assert (j < nDends+1,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        if (i == 0) {
            if (j == 1 || j == 2) {
                connect sections[j](0),sections[i](1)
            } else {
                connect sections[j](0),sections[i](0)
            }
        } else {
            connect sections[j](0),sections[i](1)
        }
        
    }
    
    vlayers.resize(0)
    vsrc.resize(0)
    vdst.resize(0)
    
}

proc shape_from_python() { local i,j,k,s localobj secnodes, vx, vy, vz, vradius, idxs, vidxs
    
    secnodes = $o1
    vx = new Vector()
    vx.from_python($o2)
    vy = new Vector()
    vy.from_python($o3)
    vz = new Vector()
    vz.from_python($o4)
    vradius = new Vector()
    vradius.from_python($o5)
    
    for s=0, secnodes.__len__()-1 {
        idxs = secnodes.__getitem__(s)
        vidxs = new Vector()
        vidxs.from_python(idxs)
        sections[s] {
            pt3dconst(1)
            for i=0, vidxs.size()-1 {
                k = vidxs.x[i]
                pt3dadd(vx.x[k], vy.x[k], vz.x[k], 2*vradius.x[k]) 
            }
        }
    }
    

    vx.resize(0)
    vy.resize(0)
    vz.resize(0)
    vradius.resize(0)
    
}

func is_art()  { return 0 }

obfunc connect2target() { localobj nc // $o1 target point process, optional $o2 returned NetCon
  sections[0] nc = new NetCon(&v(1), $o1)
  nc.threshold = 10
  if (numarg() == 2) { $o2 = nc } // for backward compatibility
  return nc
}

proc position() { local i
    
  soma for i = 0, n3d()-1 {
    pt3dchange(i, $1-xx+x3d(i), $2-yy+y3d(i), $3-zz+z3d(i), diam3d(i))
  }
  xx = $1  yy = $2  zz = $3
}

external cvode_active, continuerun

proc write_state_trace() { local logsize  localobj logfile, tlog, xlog, ylog
    
    logfile=$o1
    tlog=$o2
    xlog=$o3
    if (numarg() > 3) {
        ylog = $o4
    }
    
    logsize = tlog.size()
    
    if (numarg() > 3) {
        for i=0,tlog.size()-1 {
	    logfile.printf("%g %g %g\n", tlog.x[i], xlog.x[i], ylog.x[i])
        }
    } else {
        for i=0,tlog.size()-1 {
	    logfile.printf("%g %g\n", tlog.x[i], xlog.x[i])
        }
    }
    
}

obfunc syntest_exc() { local vec_size, i_holding, idx localobj logfile, se, vec_i, vec_v, synlst, syn, results, tlog, nil strdef fname
    
    tstart = $1
    v_holding = $2
    v_init    = $3
    if (numarg() > 3) {
        fname = $s4
    }
    
    soma { 
        se = new SEClamp(0.5)
        se.rs = 10
        se.dur1 = 1010
        se.amp1 = v_holding 
    }
    
    mainDT = 0.001
    dt = mainDT
    tstop = 1000
    
    vec_size = tstop/mainDT + 1
    
    vec_v = new Vector(vec_size)
    soma {
        vec_v.record(&v(0.5))
    }
    
    vec_i = new Vector(vec_size)
    vec_i.record(&se.i)
    
    tlog = new Vector(vec_size)
    tlog.record(&t)
    
    cvode_active(1)

    finitialize(v_init)
    fadvance()
    continuerun(tstop)
    
    t_holding_index = tlog.indwhere(">=",tstart)
    t_holding = tlog.x[t_holding_index]
    i_holding = vec_i.x[t_holding_index]
    idx = tlog.indwhere(">=",tstart) - 1
    vec_i.remove(0,idx)
    tlog.remove(0,idx)
    
    logfile = new File()
    logfile.wopen (fname)
    write_state_trace(logfile, tlog, vec_i, vec_v)
    logfile.close()
    
    i_peak = vec_i.min()
    t_peak = tlog.x[vec_i.indwhere("==",i_peak)]
    
    print "i_peak = ", i_peak
    print "i_holding = ", i_holding
    print "i_peak - i_holding = ", i_peak - i_holding
    print "t_peak = ", t_peak
    print "t_holding = ", t_holding

    amp = abs(i_peak - i_holding) * 1000
    
    i_0001 = i_holding + (i_peak - i_holding) * 1/10000
    i_10 = i_holding + (i_peak - i_holding) * 1/10
    i_20 = i_holding + (i_peak - i_holding) * 2/10
    i_50 = i_holding + (i_peak - i_holding) * 5/10
    i_80 = i_holding + (i_peak - i_holding) * 8/10
    i_90 = i_holding + (i_peak - i_holding) * 9/10
    
    t_10_90 = tlog.x[vec_i.indwhere("<",i_90)] - tlog.x[vec_i.indwhere("<",i_10)]
    t_20_80 = tlog.x[vec_i.indwhere("<",i_80)] - tlog.x[vec_i.indwhere("<",i_20)]
    
    t_all = t_peak - tlog.x[(vec_i.indwhere("<",i_0001))]
    t_50  = t_peak - tlog.x[(vec_i.indwhere(">",i_50))]
    
    idx = vec_i.indwhere("==",i_peak) - 1
    if (idx >= 0) {
        vec_i.remove(0,idx)
        tlog.remove(0,idx)
    }
    
    i_t	= i_holding - ((1/exp(1)) * abs(i_peak - i_holding))
    t_decay = tlog.x[vec_i.indwhere(">",i_t)] - tlog.x[0]
    
    results = new Vector()
    results.append(amp,t_10_90,t_20_80,t_all,t_50,t_decay)
    
    return results
}

obfunc syntest_inh() { local vec_size, i_holding, t_holding, t_holding_index, w, idx localobj se, ns, nc, nclist, vec, synlist, results, tlog, nil
    
    synlist = $o1
    se = $o2
    w = $3
    v_holding = $4
    v_init = $5
    
    soma { 
        se.dur1 = 1010
        se.amp1 = v_holding 
    }
    
    mainDT = 0.001
    dt = mainDT
    tstop = 1000
    
    vec_size = tstop/mainDT + 1
    
    vec = new Vector(vec_size)
    vec.record(&se.i)
    
    tlog = new Vector(vec_size)
    tlog.record(&t)
    
    ns = new NetStim()
    ns.interval = 1000
    ns.number = 1
    ns.start  = 200
    ns.noise  = 0
    
    nclist = new List()
    for idx=0, synlist.count()-1 {
        nc = new NetCon(ns,synlist.o(idx))
        nc.weight[0] = w
        nc.delay = 0
        nclist.append(nc)
    }
    
    cvode_active(1)
    //cvode.use_daspk(1)
    //cvode.dae_init_dteps(1e-9, 2)
    finitialize(v_init)
    fadvance()
    continuerun(tstop)
    
    
    t_holding_index = tlog.indwhere(">=",ns.start)
    t_holding = tlog.x(t_holding_index)
    i_holding = vec.x[t_holding_index]
    idx = tlog.indwhere(">=",ns.start) - 1
    vec.remove(0,idx)
    tlog.remove(0,idx)
    
    vec.printf()
    tlog.printf()
    
    i_peak = vec.max()
    t_peak = tlog.x[vec.indwhere("==",i_peak)]
    
    print "celsius = ", celsius
    print "i_peak = ", i_peak
    print "i_holding = ", i_holding
    print "i_peak - i_holding = ", i_peak - i_holding
    print "t_peak = ", t_peak
    print "t_holding = ", t_holding

    amp = abs(i_peak - i_holding) * 1000
    
    i_0001 = i_holding + (i_peak - i_holding) * 1/10000
    i_10 = i_holding + (i_peak - i_holding) * 1/10
    i_20 = i_holding + (i_peak - i_holding) * 2/10
    i_50 = i_holding + (i_peak - i_holding) * 5/10
    i_80 = i_holding + (i_peak - i_holding) * 8/10
    i_90 = i_holding + (i_peak - i_holding) * 9/10
    
    t_10_90 = tlog.x[vec.indwhere(">",i_90)] - tlog.x[vec.indwhere(">",i_10)]
    t_20_80 = tlog.x[vec.indwhere(">",i_80)] - tlog.x[vec.indwhere(">",i_20)]
    
    t_all = t_peak - tlog.x[(vec.indwhere(">",i_0001))]
    t_50  = t_peak - tlog.x[(vec.indwhere(">",i_50))]
    
    idx = vec.indwhere("==",i_peak) - 1
    if (idx >= 0) {
        vec.remove(0,idx)
        tlog.remove(0,idx)
    }
    
    i_t	= i_holding + ((1/exp(1)) * abs(i_peak - i_holding))
    t_decay = tlog.x[vec.indwhere("<",i_t)] - tlog.x[0]
    
    results = new Vector()
    results.append(amp,t_10_90,t_20_80,t_all,t_50,t_decay)
    
    ns = nil
    nc = nil
    
    return results
}


obfunc syntest_rate() { local vec_size, rate, idx localobj vec, synlist, results, tlog, nil
    
    tstart = $1
    rate = $2
    v_init = $3
    
    mainDT = 0.001
    dt = mainDT
    tstop = 1000
    
    vec_size = tstop/mainDT + 1
    
    vec = new Vector(vec_size)
    vec.record(&sections[0].v(0.5))
    
    tlog = new Vector(vec_size)
    tlog.record(&t)
    
    cvode_active(1)
    //cvode.use_daspk(1)
    //cvode.dae_init_dteps(1e-9, 2)
    finitialize(v_init)
    fadvance()
    continuerun(tstop)
    
    results = new List()
    results.append(tlog)
    results.append(vec)
    
    return results
}

endtemplate MossyCell
