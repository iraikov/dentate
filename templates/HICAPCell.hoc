begintemplate HICAPCell

public connect2target, subsets, is_art, is_connected
public soma, dendrites
public all, adend, bdend, cdend, ddend
public xx, yy, zz, position
public syns, syns_GC, syns_MC, syns_HC, syns_BC, syns_AA, syns_HCC, syns_NGFC
public syn_stim

objref all, adend, bdend, cdend, ddend
objref syns, syns_GC, syns_MC, syns_HC, syns_BC, syns_AA, syns_HCC, syns_NGFC, syns_NGFCB
objref syn_stim

create soma, dendrites[1][1]


proc init() {
    
    ndends=4
    ndendsec=4
    
    create dendrites[ndends][ndendsec]
    
    subsets(ndends,ndendsec)
    topol(ndends,ndendsec)
    geom()
    biophys()

    syns_GC = new List()
    syns_MC = new List()
    syns_HC = new List()
    syns_BC = new List()
    syns_AA = new List()
    syns_HCC = new List()
    syns_NGFC = new List()
    syns_NGFCB = new List()
    syns = new List()
    
    syns.append(syns_GC)
    syns.append(syns_MC)
    syns.append(syns_HC)
    syns.append(syns_BC)
    syns.append(syns_AA)
    syns.append(syns_HCC)
    syns.append(syns_NGFC)
    syns.append(syns_NGFCB)
    
    soma {
        syn_stim = new ExpSyn(0.5)
        syn_stim.tau = 1
    }

}

proc subsets() { local i
    
    objref all, adend, bdend, cdend, ddend
    
    all = new SectionList()
    soma all.append()
    
    for i=0, ndends-1 { 
        for j=0, ndendsec-1 {
            dendrites[i][j] all.append() 
        }
    }
    
    adend  = new SectionList()
    for i=0, ndends-1 { 
        dendrites[i][0] adend.append() 
    }
    
    bdend  = new SectionList()
    for i=0, ndends-1 { 
        dendrites[i][1] bdend.append() 
    }
    
    cdend  = new SectionList()
    for i=0, ndends-1 { 
        dendrites[i][2] cdend.append() 
    }
    
    ddend  = new SectionList()
    for i=0, ndends-1 { 
        dendrites[i][3] ddend.append() 
    }

    
}
proc geom() {
    
    soma {nseg=1 L=20 diam=15} // changed L & diam
    
    for i = 0,1 {
        dendrites[i][0]  {nseg=1 L=75 diam=4}	// bcdend 1 and 2 are apical
        dendrites[i][1] {nseg=1 L=75 diam=3}
        dendrites[i][2] {nseg=1 L=75 diam=2}
        dendrites[i][3] {nseg=1 L=75 diam=1}
    }
        
    for i = 2,3 {
        dendrites[i][0] {nseg=1 L=50 diam=4} 	// bcdend 3 and 4 are basal
        dendrites[i][1] {nseg=1 L=50 diam=3}
        dendrites[i][2] {nseg=1 L=50 diam=2}
        dendrites[i][3] {nseg=1 L=50 diam=1} 
    }
    
}

proc topol() {
    
    ndends = $1
    ndendsec = $2
    
    connect dendrites[0][0](0), soma(1)
    connect dendrites[1][0](0), soma(1)
    connect dendrites[2][0](0), soma(0)
    connect dendrites[3][0](0), soma(0)
    
    for i=0,ndends-1 {
        for j=1,ndendsec-1 {
	    connect dendrites[i][j](0), dendrites[i][j-1](1)
        }
    }
}


proc biophys() {
    g_na = 0.079
	g_k = 0.0035
	g_leak  = 0.0000318
	forsec all {
	insert ccanl
	catau_ccanl = 10
	caiinf_ccanl = 5.e-6
	insert borgka
	gkabar_borgka=0.0004
	insert nca  // HAV-N- Ca channel
	gncabar_nca=0.0  
	insert lca
	glcabar_lca=0.0015
	insert gskch
	gskbar_gskch=0.001
	insert cagk
	gkbar_cagk=0.0002
	insert hyperde3
	ghyfbar_hyperde3=0.000035
	ghysbar_hyperde3=0.000035
	cm = 0.95
	}
	
	soma {insert ichan2  //ildikos ichan
	gnatbar_ichan2=g_na
	gkfbar_ichan2=g_k
	gl_ichan2 = g_leak
	} 

	forsec adend {insert ichan2
	gnatbar_ichan2=g_na
	gkfbar_ichan2=g_k
	gl_ichan2 = g_leak
	}
	
	forsec bdend {insert ichan2
	gnatbar_ichan2=0.0 
	gkfbar_ichan2=0.00
	gl_ichan2 = g_leak
	}
	
	forsec cdend {insert ichan2
	gnatbar_ichan2=0.0
	gkfbar_ichan2=0.00
	gl_ichan2 = g_leak
	}		
		
	forsec ddend {insert ichan2
	gnatbar_ichan2=0.0
	gkfbar_ichan2=0.00
	gl_ichan2 = g_leak
	}	
	
	forsec all {Ra=100}
	forsec all {

               enat = 55 
               ekf = -90  
               ek=-90  
               esk=-90 
               elca=130
               el_ichan2 =-64	
               ehyf=-40 ehys=-40
               cao_ccanl=2 

         }  // make catau slower70e-3 	cao=2 cai=50.e-6 
}


func is_art()  { return 0 }

obfunc connect2target() { localobj nc // $o1 target point process, optional $o2 returned NetCon
  soma nc = new NetCon(&v(1), $o1)
  nc.threshold = 10
  if (numarg() == 2) { $o2 = nc } // for backward compatibility
  return nc
}

proc position() { local i
    
  soma for i = 0, n3d()-1 {
    pt3dchange(i, $1-xx+x3d(i), $2-yy+y3d(i), $3-zz+z3d(i), diam3d(i))
  }
  xx = $1  yy = $2  zz = $3
}



endtemplate HICAPCell