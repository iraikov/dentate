begintemplate HICAPCell

public connect2target, subsets, is_art, is_connected
public soma, hcdend1, hcdend2, hcdend3, hcdend4
public all, adend, bdend, cdend, ddend, dendrite_list
public xx, yy, zz, position

objref syn, pre_list, synlist

ndend1=4
ndend2=4
ndend3=4
ndend4=4

create soma, hcdend1[ndend1], hcdend2[ndend2], hcdend3[ndend3], hcdend4[ndend4]

objref all, adend, bdend, cdend, ddend, dendrite_list

proc init() {
    synlist = new List()
    subsets()
    topol()
    geom()
    biophys()
    synapses()
}

proc subsets() { local i
    
    objref all, adend, bdend, cdend, ddend
    all = new SectionList()
    soma all.append()
    for i=0, 3 hcdend1 [i] all.append()
    for i=0, 3 hcdend2 [i] all.append()
    for i=0, 3 hcdend3 [i] all.append()
    for i=0, 3 hcdend4 [i] all.append()
	
	dendrite_list = new SectionList()
    for i=0, 3 hcdend1 [i] dendrite_list.append()
    for i=0, 3 hcdend2 [i] dendrite_list.append()
    for i=0, 3 hcdend3 [i] dendrite_list.append()
    for i=0, 3 hcdend4 [i] dendrite_list.append()
    
    adend  = new SectionList()
    hcdend1 [0] adend.append()
    hcdend2 [0] adend.append()
    hcdend3 [0] adend.append()
    hcdend4 [0] adend.append()
    
    bdend  = new SectionList()
    hcdend1 [1] bdend.append()
    hcdend2 [1] bdend.append()
    hcdend3 [1] bdend.append()
    hcdend4 [1] bdend.append()
    
    cdend  = new SectionList()
    hcdend1 [2] cdend.append()
    hcdend2 [2] cdend.append()
    hcdend3 [2] cdend.append()
    hcdend4 [2] cdend.append()
    
    ddend  = new SectionList()
    hcdend1 [3] ddend.append()
    hcdend2 [3] ddend.append()
    hcdend3 [3] ddend.append()
    hcdend4 [3] ddend.append()
}

proc geom() {
    
    soma {nseg=1 L=20 diam=15} // changed L & diam
    
    hcdend1 [0] {nseg=1 L=75 diam=4}	// hcdend 1 and 2 are apical
    hcdend1 [1] {nseg=1 L=75 diam=3}
    hcdend1 [2] {nseg=1 L=75 diam=2}
    hcdend1 [3] {nseg=1 L=75 diam=1}
    
    hcdend2 [0] {nseg=1 L=75 diam=4}
    hcdend2 [1] {nseg=1 L=75 diam=3}
    hcdend2 [2] {nseg=1 L=75 diam=2}
    hcdend2 [3] {nseg=1 L=75 diam=1}
    
    hcdend3 [0] {nseg=1 L=50 diam=4} 	// hcdend 3 and 4 are basal
    hcdend3 [1] {nseg=1 L=50 diam=3}
    hcdend3 [2] {nseg=1 L=50 diam=2}
    hcdend3 [3] {nseg=1 L=50 diam=1} 
    
    hcdend4 [0] {nseg=1 L=50 diam=4}
    hcdend4 [1] {nseg=1 L=50 diam=3}
    hcdend4 [2] {nseg=1 L=50 diam=2}
    hcdend4 [3] {nseg=1 L=50 diam=1} 	
    
}

proc topol() {
    connect hcdend1[0](0), soma(1)
    connect hcdend2[0](0), soma(1)
    connect hcdend3[0](0), soma(0)
    connect hcdend4[0](0), soma(0)
    
    for i=1,3 {
	connect hcdend1[i](0), hcdend1[i-1](1)
    }
    for i=1,3 {
	connect hcdend2[i](0), hcdend2[i-1](1)
    }
    for i=1,3 {
	connect hcdend3[i](0), hcdend3[i-1](1)
    }
    for i=1,3 {
	connect hcdend4[i](0), hcdend4[i-1](1)
    }
}    


proc biophys() {
    g_na = 0.079
	g_k = 0.0035
	g_leak  = 0.0000318
	forsec all {
		insert ccanl
	catau_ccanl = 10
	caiinf_ccanl = 5.e-6
		insert borgka
	gkabar_borgka=0.0004
		insert nca  // HAV-N- Ca channel
	gncabar_nca=0.0  
		insert lca
	glcabar_lca=0.0015
		insert gskch
	gskbar_gskch=0.001
		insert cagk
	gkbar_cagk=0.0002
		insert hyperde3
	ghyfbar_hyperde3=0.000035
	ghysbar_hyperde3=0.000035
	cm = 0.95
	}
	
	soma {insert ichan2  //ildikos ichan
	gnatbar_ichan2=g_na
	gkfbar_ichan2=g_k
	gl_ichan2 = g_leak
	} 

	forsec adend {insert ichan2
	gnatbar_ichan2=g_na
	gkfbar_ichan2=g_k
	gl_ichan2 = g_leak
	}
	
	forsec bdend {insert ichan2
	gnatbar_ichan2=0.0 
	gkfbar_ichan2=0.00
	gl_ichan2 = g_leak
	}
	
	forsec cdend {insert ichan2
	gnatbar_ichan2=0.0
	gkfbar_ichan2=0.00
	gl_ichan2 = g_leak
	}		
		
	forsec ddend {insert ichan2
	gnatbar_ichan2=0.0
	gkfbar_ichan2=0.00
	gl_ichan2 = g_leak
	}	
	
	forsec all {Ra=100}
	forsec all {enat = 55 ekf = -90  ek=-90  esk=-90 elca=130
		 el_ichan2 =-64	ehyf=-40 ehys=-40
		cao_ccanl=2 }  // make catau slower70e-3 	cao=2 cai=50.e-6 
}


func is_art()  { return 0 }

obfunc connect2target() { localobj nc // $o1 target point process, optional $o2 returned NetCon
  soma nc = new NetCon(&v(1), $o1)
  nc.threshold = 10
  if (numarg() == 2) { $o2 = nc } // for backward compatibility
  return nc
}

proc position() { local i
    
  soma for i = 0, n3d()-1 {
    pt3dchange(i, $1-xx+x3d(i), $2-yy+y3d(i), $3-zz+z3d(i), diam3d(i))
  }
  xx = $1  yy = $2  zz = $3
}

objref syn_
proc synapses() {
  /* E0 */   hcdend1 syn_ = new ExpSyn(0.8)  synlist.append(syn_)
    syn_.tau = 2
  /* I1 */   hcdend1 syn_ = new ExpSyn(0.1)  synlist.append(syn_)
    syn_.tau = 5
    syn_.e = -80
}



endtemplate HICAPCell